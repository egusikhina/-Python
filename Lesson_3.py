# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую
# их деление. Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.
# def division(num_1, num_2):
#     try:
#         a = num_1 / num_2
#     except ZeroDivisionError:
#         return 'На ноль делить нельзя'
#     return a
#
# num_1 = float(input('Введите первое число: '))
# num_2 = float(input('Введите второе число: '))
# print(division(num_1, num_2))

# 2. Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя:
# имя, фамилия, год рождения, город проживания, email, телефон. Функция должна принимать
# параметры как именованные аргументы. Реализовать вывод данных о пользователе одной строкой.
# def dossier(name, surname, year, city, mail, phone):
#     print(f'{name} {surname} {year} {city} {mail} {phone}')
#
# name = input('Введите имя: ')
# surname = input('Введите фамилию: ')
# year = input('Введите год рождения: ')
# city = input('Введите город проживания: ')
# mail = input('Введите электронный адрес: ')
# phone = input('Введите телефон: ')
# dossier(name, surname, year, city, mail, phone)

# 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента, и
# возвращает сумму наибольших двух аргументов.
# def my_func(num_1, num_2, num_3):
#     numbers_1 = [num_1, num_2, num_3]
#     numbers_2 = sorted(numbers_1, reverse=True)
#     return numbers_2[0] + numbers_2[1]
#
# num_1 = float(input('Введите первое число: '))
# num_2 = float(input('Введите второе число: '))
# num_3 = float(input('Введите третье число: '))
#
# print(my_func(num_1, num_2, num_3))

# 4. Программа принимает действительное положительное число x и целое отрицательное
# число y. Необходимо выполнить возведение числа x в степень y. Задание необходимо
# реализовать в виде функции my_func(x, y). При решении задания необходимо обойтись без
# встроенной функции возведения числа в степень.
# Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень
# с помощью оператора **. Второй — более сложная реализация без оператора **, предусматривающая
# использование цикла.

# def my_func(x, y):
#     return x ** y

# def my_func(x, y):
#     product = 1
#     for i in range(abs(y)):
#         product = x * product
#     return 1 / product
#
# print(my_func(2, -3))
# print(my_func(4, -2))


# 5. Программа запрашивает у пользователя строку чисел, разделенных пробелом. При нажатии
# Enter должна выводиться сумма чисел. Пользователь может продолжить ввод чисел, разделенных
# пробелом и снова нажать Enter. Сумма вновь введенных чисел будет добавляться к уже
# подсчитанной сумме. Но если вместо числа вводится специальный символ, выполнение программы
# завершается. Если специальный символ введен после нескольких чисел, то вначале нужно
# добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.
# def my_func():
#     numbers = []
#     i = None
#     sum = 0
#     while not i == '&':
#         list_1 = input('Введите числа: ')
#         numbers = list_1.split()
#         for i in numbers:
#             if i.isdigit() == True:
#                 i = int(i)
#                 sum += i
#             if i == '&':
#                 break
#         print(sum)
#
# my_func()

# 6. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и
# возвращающую его же, но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text.
# Продолжить работу над заданием. В программу должна попадать строка из слов,
# разделенных пробелом. Каждое слово состоит из латинских букв в нижнем регистре.
# Сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы.
# Необходимо использовать написанную ранее функцию int_func().

# word = input('Введите слово: ')
# def int_func(word):
#     return word.capitalize()
#
# print(int_func(word))
#
# text = input('Введите строку: ')
# def my_func(text):
#     words = text.split()
#     text_1 = ''
#     for word in words:
#         element = int_func(word)
#         text_1 = f'{text_1} {element}'
#     print(text_1[1:])
#
# my_func(text)